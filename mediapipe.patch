diff --git a/mediapipe/calculators/util/multi_world_landmarks_smoothing_calculator.cc b/mediapipe/calculators/util/multi_world_landmarks_smoothing_calculator.cc
index ddc16d29..6378dfb1 100644
--- a/mediapipe/calculators/util/multi_world_landmarks_smoothing_calculator.cc
+++ b/mediapipe/calculators/util/multi_world_landmarks_smoothing_calculator.cc
@@ -53,11 +53,19 @@ class MultiWorldLandmarksSmoothingCalculatorImpl
     const auto& timestamp =
         absl::Microseconds(cc->InputTimestamp().Microseconds());
 
-    const auto& tracking_ids = kTrackingIds(cc).Get();
+    //const auto& tracking_ids = kTrackingIds(cc).Get();
+    // TODO: This is a temporary change. Undo this, once mediapipe has added proper support for
+    // landmark smoothing
+    static std::vector<int64_t> tracking_ids;
+    if(tracking_ids.empty()) {
+      tracking_ids.resize(100);
+      for(size_t i=0;i<tracking_ids.size();++i)
+        tracking_ids[i] = i;
+    }
     multi_filters_.ClearUnused(tracking_ids);
 
     const auto& in_landmarks_vec = kInLandmarks(cc).Get();
-    RET_CHECK_EQ(in_landmarks_vec.size(), tracking_ids.size());
+    // RET_CHECK_EQ(in_landmarks_vec.size(), tracking_ids.size());
 
     std::optional<std::vector<Rect>> object_scale_roi_vec;
     if (kObjectScaleRoi(cc).IsConnected() && !kObjectScaleRoi(cc).IsEmpty()) {
@@ -66,7 +74,7 @@ class MultiWorldLandmarksSmoothingCalculatorImpl
     }
 
     std::vector<LandmarkList> out_landmarks_vec;
-    for (int i = 0; i < tracking_ids.size(); ++i) {
+    for (int i = 0; i < in_landmarks_vec.size(); ++i) {
       const auto& in_landmarks = in_landmarks_vec[i];
 
       std::optional<float> object_scale;
diff --git a/mediapipe/tasks/cc/vision/hand_landmarker/BUILD b/mediapipe/tasks/cc/vision/hand_landmarker/BUILD
index f2afac49..323aa37c 100644
--- a/mediapipe/tasks/cc/vision/hand_landmarker/BUILD
+++ b/mediapipe/tasks/cc/vision/hand_landmarker/BUILD
@@ -113,6 +113,7 @@ cc_library(
 cc_library(
     name = "hand_landmarker_graph",
     srcs = ["hand_landmarker_graph.cc"],
+    visibility = ["//visibility:public"],
     deps = [
         ":hand_landmarks_detector_graph",
         "//mediapipe/calculators/core:begin_loop_calculator",
diff --git a/mediapipe/tasks/cc/vision/pose_landmarker/BUILD b/mediapipe/tasks/cc/vision/pose_landmarker/BUILD
index f97857dd..301a5dd6 100644
--- a/mediapipe/tasks/cc/vision/pose_landmarker/BUILD
+++ b/mediapipe/tasks/cc/vision/pose_landmarker/BUILD
@@ -106,6 +106,7 @@ cc_library(
 cc_library(
     name = "pose_landmarker_graph",
     srcs = ["pose_landmarker_graph.cc"],
+    visibility = ["//visibility:public"],
     deps = [
         ":pose_landmarks_detector_graph",
         "//mediapipe/calculators/core:clip_vector_size_calculator",
diff --git a/mediapipe/tasks/cc/core/BUILD b/mediapipe/tasks/cc/core/BUILD
index a3e44c53..8d60556a 100644
--- a/mediapipe/tasks/cc/core/BUILD
+++ b/mediapipe/tasks/cc/core/BUILD
@@ -57,6 +57,7 @@ cc_library(
     name = "external_file_handler",
     srcs = ["external_file_handler.cc"],
     hdrs = ["external_file_handler.h"],
+    visibility = ["//visibility:public"],
     deps = [
         "//mediapipe/framework/port:integral_types",
         "//mediapipe/framework/port:status",
@@ -303,6 +304,7 @@ cc_test_with_tflite(
 cc_library(
     name = "base_task_api",
     hdrs = ["base_task_api.h"],
+    visibility = ["//visibility:public"],
     deps = [
         ":task_runner",
         "//mediapipe/calculators/core:flow_limiter_calculator",
diff --git a/mediapipe/tasks/cc/core/model_asset_bundle_resources.cc b/mediapipe/tasks/cc/core/model_asset_bundle_resources.cc
index 58b30630..42160b73 100644
--- a/mediapipe/tasks/cc/core/model_asset_bundle_resources.cc
+++ b/mediapipe/tasks/cc/core/model_asset_bundle_resources.cc
@@ -59,10 +59,10 @@ absl::Status ModelAssetBundleResources::ExtractFilesFromExternalFileProto() {
   if (model_asset_bundle_file_->has_file_name()) {
     // If the model asset bundle file name is a relative path, searches the file
     // in a platform-specific location and returns the absolute path on success.
-    ASSIGN_OR_RETURN(
+    /*ASSIGN_OR_RETURN(
         std::string path_to_resource,
         mediapipe::PathToResourceAsFile(model_asset_bundle_file_->file_name()));
-    model_asset_bundle_file_->set_file_name(path_to_resource);
+    model_asset_bundle_file_->set_file_name(path_to_resource);*/
   }
   ASSIGN_OR_RETURN(model_asset_bundle_file_handler_,
                    ExternalFileHandler::CreateFromExternalFile(
diff --git a/mediapipe/tasks/cc/core/model_resources.cc b/mediapipe/tasks/cc/core/model_resources.cc
index 1a917f72..ea14afe3 100644
--- a/mediapipe/tasks/cc/core/model_resources.cc
+++ b/mediapipe/tasks/cc/core/model_resources.cc
@@ -110,9 +110,9 @@ absl::Status ModelResources::BuildModelFromExternalFileProto() {
     } else {
       // If the model file name is a relative path, searches the file in a
       // platform-specific location and returns the absolute path on success.
-      ASSIGN_OR_RETURN(std::string path_to_resource,
+      /*ASSIGN_OR_RETURN(std::string path_to_resource,
                        PathToResourceAsFile(model_file_->file_name()));
-      model_file_->set_file_name(path_to_resource);
+      model_file_->set_file_name(path_to_resource);*/
     }
   }
   ASSIGN_OR_RETURN(
diff --git a/mediapipe/tasks/cc/vision/face_geometry/BUILD b/mediapipe/tasks/cc/vision/face_geometry/BUILD
index 6bd9912b..2dec179f 100644
--- a/mediapipe/tasks/cc/vision/face_geometry/BUILD
+++ b/mediapipe/tasks/cc/vision/face_geometry/BUILD
@@ -19,6 +19,7 @@ package(default_visibility = ["//mediapipe/tasks:internal"])
 cc_library(
     name = "face_geometry_from_landmarks_graph",
     srcs = ["face_geometry_from_landmarks_graph.cc"],
+    visibility = ["//visibility:public"],
     deps = [
         "//mediapipe/calculators/core:begin_loop_calculator",
         "//mediapipe/calculators/core:end_loop_calculator",
diff --git a/mediapipe/tasks/cc/vision/face_landmarker/BUILD b/mediapipe/tasks/cc/vision/face_landmarker/BUILD
index 16de2271..8bdd788a 100644
--- a/mediapipe/tasks/cc/vision/face_landmarker/BUILD
+++ b/mediapipe/tasks/cc/vision/face_landmarker/BUILD
@@ -169,6 +169,7 @@ cc_library(
 cc_library(
     name = "face_landmarker_graph",
     srcs = ["face_landmarker_graph.cc"],
+    visibility = ["//visibility:public"],
     deps = [
         ":face_landmarks_detector_graph",
         "//mediapipe/calculators/core:begin_loop_calculator",
diff --git a/mediapipe/tasks/cc/vision/utils/BUILD b/mediapipe/tasks/cc/vision/utils/BUILD
index ae303441..e97cd5b4 100644
--- a/mediapipe/tasks/cc/vision/utils/BUILD
+++ b/mediapipe/tasks/cc/vision/utils/BUILD
@@ -73,6 +73,7 @@ cc_library(
     name = "image_utils",
     srcs = ["image_utils.cc"],
     hdrs = ["image_utils.h"],
+    visibility = ["//visibility:public"],
     deps = [
         "//mediapipe/framework/formats:image",
         "//mediapipe/framework/formats:image_frame",
diff --git a/mediapipe/tasks/testdata/vision/BUILD b/mediapipe/tasks/testdata/vision/BUILD
index 4fde58e0..ce02453e 100644
--- a/mediapipe/tasks/testdata/vision/BUILD
+++ b/mediapipe/tasks/testdata/vision/BUILD
@@ -205,6 +205,7 @@ filegroup(
         "selfie_segmentation.tflite",
         "selfie_segmentation_landscape.tflite",
     ],
+    visibility = ["//visibility:public"],
 )
 
 filegroup(
diff --git a/mediapipe/util/resource_util.cc b/mediapipe/util/resource_util.cc
index 38636f32..a4f296d1 100644
--- a/mediapipe/util/resource_util.cc
+++ b/mediapipe/util/resource_util.cc
@@ -32,7 +32,7 @@ ResourceProviderFn resource_provider_ = nullptr;
 absl::Status GetResourceContents(const std::string& path, std::string* output,
                                  bool read_as_binary) {
   if (resource_provider_) {
-    return resource_provider_(path, output);
+    return resource_provider_(path, output, read_as_binary);
   }
   return internal::DefaultGetResourceContents(path, output, read_as_binary);
 }
diff --git a/mediapipe/util/resource_util_custom.h b/mediapipe/util/resource_util_custom.h
index e74af8b2..59f24657 100644
--- a/mediapipe/util/resource_util_custom.h
+++ b/mediapipe/util/resource_util_custom.h
@@ -7,7 +7,7 @@
 
 namespace mediapipe {
 
-typedef std::function<absl::Status(const std::string&, std::string*)>
+typedef std::function<absl::Status(const std::string&, std::string*, bool)>
     ResourceProviderFn;
 
 // Returns true if files are provided via a custom resource provider.
